package main

import (
    "log"
    "time"
    "golang.org/x/sys/windows/svc"
    "golang.org/x/sys/windows/registry"
)

// myService represents the service structure
type myService struct{}

// Execute handles service commands
func (m *myService) Execute(args []string, r <-chan svc.ChangeRequest, s chan<- svc.Status) (bool, uint32) {
    const cmdsAccepted = svc.AcceptStop | svc.AcceptShutdown
    s <- svc.Status{State: svc.StartPending}
    go m.run() // Start the monitoring function
    s <- svc.Status{State: svc.Running, Accepts: cmdsAccepted}

    for c := range r {
        switch c.Cmd {
        case svc.Stop, svc.Shutdown:
            s <- svc.Status{State: svc.StopPending}
            return false, 0
        }
    }
    return false, 0
}

// run is the monitoring function that checks the registry
func (m *myService) run() {
    for {
        monitorRegistryKey() // Call your registry monitoring function
        time.Sleep(2 * time.Second)
    }
}

// monitorRegistryKey opens, monitors, and deletes the registry key
func monitorRegistryKey() {
    // Open the registry key for reading
    key, err := registry.OpenKey(registry.CURRENT_USER, `Software\Classes\ms-settings\shell\open\command`, registry.READ)
    if err != nil {
        log.Printf("Error opening registry key: %v", err)
        return
    }
    defer key.Close()

    // Log that the registry key exists and is being monitored
    log.Println("Registry key exists and is being monitored.")

    // Delete the registry key (ensure this is what you want)
    err = registry.DeleteKey(registry.CURRENT_USER, `Software\Classes\ms-settings\shell\open\command`)
    if err != nil {
        log.Printf("Error deleting registry key: %v", err)
        return
    }
    log.Println("Registry key deleted successfully.")
}

func main() {
    isInteractive, err := svc.IsAnInteractiveSession()
    if err != nil {
        log.Fatalf("failed to determine if we are running in an interactive session: %v", err)
    }
    if isInteractive {
        // Run as a console application for debugging
        s := &myService{} // Create a pointer to myService
        s.run()
    } else {
        // Run as a service
        err = svc.Run("MyRegistryMonitorService", &myService{})
        if err != nil {
            log.Fatalf("failed to run service: %v", err)
        }
    }
}
