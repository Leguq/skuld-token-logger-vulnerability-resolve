package main

import (
    "log"
    "time"
    "golang.org/x/sys/windows/svc"
)

type myService struct{}

// Execute handles service commands
func (m *myService) Execute(args []string, r <-chan svc.ChangeRequest, s chan<- svc.Status) (bool, uint32) {
    const cmdsAccepted = svc.AcceptStop | svc.AcceptShutdown
    s <- svc.Status{State: svc.StartPending}
    go m.run() // Your monitoring function
    s <- svc.Status{State: svc.Running, Accepts: cmdsAccepted}

    for c := range r {
        switch c.Cmd {
        case svc.Stop, svc.Shutdown:
            s <- svc.Status{State: svc.StopPending}
            return false, 0
        }
    }
    return false, 0
}

func (m *myService) run() {
    for {
        monitorRegistryKey() // Call your registry monitoring function
        time.Sleep(2 * time.Second)
    }
}

func main() {
    isInteractive, err := svc.IsAnInteractiveSession()
    if err != nil {
        log.Fatalf("failed to determine if we are running in an interactive session: %v", err)
    }
    if isInteractive {
        // Run as a console application for debugging
        myService{}.run()
    } else {
        // Run as a service
        svc.Run("MyRegistryMonitorService", &myService{})
    }
}
